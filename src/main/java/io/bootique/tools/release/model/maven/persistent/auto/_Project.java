package io.bootique.tools.release.model.maven.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import io.bootique.tools.release.model.maven.persistent.Module;
import io.bootique.tools.release.model.maven.persistent.Project;
import io.bootique.tools.release.model.persistent.Repository;

/**
 * Class _Project was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Project extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<String> BRANCH_NAME = Property.create("branchName", String.class);
    public static final Property<Boolean> DISABLE = Property.create("disable", Boolean.class);
    public static final Property<String> PATH_STR = Property.create("pathStr", String.class);
    public static final Property<Integer> ROOT_MODULE_ID = Property.create("rootModuleId", Integer.class);
    public static final Property<String> VERSION = Property.create("version", String.class);
    public static final Property<List<Project>> DEPENDENCIES = Property.create("dependencies", List.class);
    public static final Property<List<Module>> MODULES = Property.create("modules", List.class);
    public static final Property<Repository> REPOSITORY = Property.create("repository", Repository.class);
    public static final Property<Module> ROOT_MODULE = Property.create("rootModule", Module.class);

    protected String branchName;
    protected Boolean disable;
    protected String pathStr;
    protected Integer rootModuleId;
    protected String version;

    protected Object dependencies;
    protected Object modules;
    protected Object repository;
    protected Object rootModule;

    public void setBranchName(String branchName) {
        beforePropertyWrite("branchName", this.branchName, branchName);
        this.branchName = branchName;
    }

    public String getBranchName() {
        beforePropertyRead("branchName");
        return this.branchName;
    }

    public void setDisable(boolean disable) {
        beforePropertyWrite("disable", this.disable, disable);
        this.disable = disable;
    }

	public boolean isDisable() {
        beforePropertyRead("disable");
        if(this.disable == null) {
            return false;
        }
        return this.disable;
    }

    public void setPathStr(String pathStr) {
        beforePropertyWrite("pathStr", this.pathStr, pathStr);
        this.pathStr = pathStr;
    }

    public String getPathStr() {
        beforePropertyRead("pathStr");
        return this.pathStr;
    }

    public void setRootModuleId(int rootModuleId) {
        beforePropertyWrite("rootModuleId", this.rootModuleId, rootModuleId);
        this.rootModuleId = rootModuleId;
    }

    public int getRootModuleId() {
        beforePropertyRead("rootModuleId");
        if(this.rootModuleId == null) {
            return 0;
        }
        return this.rootModuleId;
    }

    public void setVersion(String version) {
        beforePropertyWrite("version", this.version, version);
        this.version = version;
    }

    public String getVersion() {
        beforePropertyRead("version");
        return this.version;
    }

    public void addToDependencies(Project obj) {
        addToManyTarget("dependencies", obj, true);
    }

    public void removeFromDependencies(Project obj) {
        removeToManyTarget("dependencies", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Project> getDependencies() {
        return (List<Project>)readProperty("dependencies");
    }

    public void addToModules(Module obj) {
        addToManyTarget("modules", obj, true);
    }

    public void removeFromModules(Module obj) {
        removeToManyTarget("modules", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Module> getModules() {
        return (List<Module>)readProperty("modules");
    }

    public void setRepository(Repository repository) {
        setToOneTarget("repository", repository, true);
    }

    public Repository getRepository() {
        return (Repository)readProperty("repository");
    }

    public void setRootModule(Module rootModule) {
        setToOneTarget("rootModule", rootModule, true);
    }

    public Module getRootModule() {
        return (Module)readProperty("rootModule");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "branchName":
                return this.branchName;
            case "disable":
                return this.disable;
            case "pathStr":
                return this.pathStr;
            case "rootModuleId":
                return this.rootModuleId;
            case "version":
                return this.version;
            case "dependencies":
                return this.dependencies;
            case "modules":
                return this.modules;
            case "repository":
                return this.repository;
            case "rootModule":
                return this.rootModule;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "branchName":
                this.branchName = (String)val;
                break;
            case "disable":
                this.disable = (Boolean)val;
                break;
            case "pathStr":
                this.pathStr = (String)val;
                break;
            case "rootModuleId":
                this.rootModuleId = (Integer)val;
                break;
            case "version":
                this.version = (String)val;
                break;
            case "dependencies":
                this.dependencies = val;
                break;
            case "modules":
                this.modules = val;
                break;
            case "repository":
                this.repository = val;
                break;
            case "rootModule":
                this.rootModule = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.branchName);
        out.writeObject(this.disable);
        out.writeObject(this.pathStr);
        out.writeObject(this.rootModuleId);
        out.writeObject(this.version);
        out.writeObject(this.dependencies);
        out.writeObject(this.modules);
        out.writeObject(this.repository);
        out.writeObject(this.rootModule);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.branchName = (String)in.readObject();
        this.disable = (Boolean)in.readObject();
        this.pathStr = (String)in.readObject();
        this.rootModuleId = (Integer)in.readObject();
        this.version = (String)in.readObject();
        this.dependencies = in.readObject();
        this.modules = in.readObject();
        this.repository = in.readObject();
        this.rootModule = in.readObject();
    }

}
