package io.bootique.tools.release.model.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.util.List;

import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import io.bootique.tools.release.model.persistent.GitHubEntity;
import io.bootique.tools.release.model.persistent.Repository;

/**
 * Class _ParentRepository was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ParentRepository extends GitHubEntity {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final DateProperty<LocalDate> PUSHED_AT = PropertyFactory.createDate("pushedAt", LocalDate.class);
    public static final StringProperty<String> SSH_URL = PropertyFactory.createString("sshUrl", String.class);
    public static final DateProperty<LocalDate> UPDATED_AT = PropertyFactory.createDate("updatedAt", LocalDate.class);
    public static final ListProperty<Repository> PARENT = PropertyFactory.createList("parent", Repository.class);

    protected String name;
    protected LocalDate pushedAt;
    protected String sshUrl;
    protected LocalDate updatedAt;

    protected Object parent;

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setPushedAt(LocalDate pushedAt) {
        beforePropertyWrite("pushedAt", this.pushedAt, pushedAt);
        this.pushedAt = pushedAt;
    }

    public LocalDate getPushedAt() {
        beforePropertyRead("pushedAt");
        return this.pushedAt;
    }

    public void setSshUrl(String sshUrl) {
        beforePropertyWrite("sshUrl", this.sshUrl, sshUrl);
        this.sshUrl = sshUrl;
    }

    public String getSshUrl() {
        beforePropertyRead("sshUrl");
        return this.sshUrl;
    }

    public void setUpdatedAt(LocalDate updatedAt) {
        beforePropertyWrite("updatedAt", this.updatedAt, updatedAt);
        this.updatedAt = updatedAt;
    }

    public LocalDate getUpdatedAt() {
        beforePropertyRead("updatedAt");
        return this.updatedAt;
    }

    public void addToParent(Repository obj) {
        addToManyTarget("parent", obj, true);
    }

    public void removeFromParent(Repository obj) {
        removeToManyTarget("parent", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Repository> getParent() {
        return (List<Repository>)readProperty("parent");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "name":
                return this.name;
            case "pushedAt":
                return this.pushedAt;
            case "sshUrl":
                return this.sshUrl;
            case "updatedAt":
                return this.updatedAt;
            case "parent":
                return this.parent;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "name":
                this.name = (String)val;
                break;
            case "pushedAt":
                this.pushedAt = (LocalDate)val;
                break;
            case "sshUrl":
                this.sshUrl = (String)val;
                break;
            case "updatedAt":
                this.updatedAt = (LocalDate)val;
                break;
            case "parent":
                this.parent = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.name);
        out.writeObject(this.pushedAt);
        out.writeObject(this.sshUrl);
        out.writeObject(this.updatedAt);
        out.writeObject(this.parent);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.name = (String)in.readObject();
        this.pushedAt = (LocalDate)in.readObject();
        this.sshUrl = (String)in.readObject();
        this.updatedAt = (LocalDate)in.readObject();
        this.parent = in.readObject();
    }

}
