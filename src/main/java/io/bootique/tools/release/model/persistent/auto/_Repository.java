package io.bootique.tools.release.model.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import io.bootique.tools.release.model.persistent.ClosedIssue;
import io.bootique.tools.release.model.persistent.GitHubEntity;
import io.bootique.tools.release.model.persistent.Milestone;
import io.bootique.tools.release.model.persistent.OpenIssue;
import io.bootique.tools.release.model.persistent.Organization;
import io.bootique.tools.release.model.persistent.PullRequest;
import io.bootique.tools.release.model.persistent.Repository;

/**
 * Class _Repository was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Repository extends GitHubEntity {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final StringProperty<String> LOCAL_STATUS = PropertyFactory.createString("localStatus", String.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final DateProperty<LocalDateTime> PUSHED_AT = PropertyFactory.createDate("pushedAt", LocalDateTime.class);
    public static final StringProperty<String> PUSHED_AT_STR = PropertyFactory.createString("pushedAtStr", String.class);
    public static final StringProperty<String> SSH_URL = PropertyFactory.createString("sshUrl", String.class);
    public static final DateProperty<LocalDateTime> UPDATED_AT = PropertyFactory.createDate("updatedAt", LocalDateTime.class);
    public static final BaseProperty<Boolean> UPSTREAM = PropertyFactory.createBase("upstream", Boolean.class);
    public static final ListProperty<OpenIssue> ISSUES = PropertyFactory.createList("issues", OpenIssue.class);
    public static final ListProperty<ClosedIssue> ISSUES_CLOSE = PropertyFactory.createList("issuesClose", ClosedIssue.class);
    public static final ListProperty<Milestone> MILESTONES = PropertyFactory.createList("milestones", Milestone.class);
    public static final EntityProperty<Organization> ORGANIZATION = PropertyFactory.createEntity("organization", Organization.class);
    public static final EntityProperty<Repository> PARENT = PropertyFactory.createEntity("parent", Repository.class);
    public static final ListProperty<PullRequest> PULL_REQUESTS = PropertyFactory.createList("pullRequests", PullRequest.class);

    protected String description;
    protected String localStatus;
    protected String name;
    protected LocalDateTime pushedAt;
    protected String pushedAtStr;
    protected String sshUrl;
    protected LocalDateTime updatedAt;
    protected boolean upstream;

    protected Object issues;
    protected Object issuesClose;
    protected Object milestones;
    protected Object organization;
    protected Object parent;
    protected Object pullRequests;

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setLocalStatus(String localStatus) {
        beforePropertyWrite("localStatus", this.localStatus, localStatus);
        this.localStatus = localStatus;
    }

    public String getLocalStatus() {
        beforePropertyRead("localStatus");
        return this.localStatus;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setPushedAt(LocalDateTime pushedAt) {
        beforePropertyWrite("pushedAt", this.pushedAt, pushedAt);
        this.pushedAt = pushedAt;
    }

    public LocalDateTime getPushedAt() {
        beforePropertyRead("pushedAt");
        return this.pushedAt;
    }

    public void setPushedAtStr(String pushedAtStr) {
        beforePropertyWrite("pushedAtStr", this.pushedAtStr, pushedAtStr);
        this.pushedAtStr = pushedAtStr;
    }

    public String getPushedAtStr() {
        beforePropertyRead("pushedAtStr");
        return this.pushedAtStr;
    }

    public void setSshUrl(String sshUrl) {
        beforePropertyWrite("sshUrl", this.sshUrl, sshUrl);
        this.sshUrl = sshUrl;
    }

    public String getSshUrl() {
        beforePropertyRead("sshUrl");
        return this.sshUrl;
    }

    public void setUpdatedAt(LocalDateTime updatedAt) {
        beforePropertyWrite("updatedAt", this.updatedAt, updatedAt);
        this.updatedAt = updatedAt;
    }

    public LocalDateTime getUpdatedAt() {
        beforePropertyRead("updatedAt");
        return this.updatedAt;
    }

    public void setUpstream(boolean upstream) {
        beforePropertyWrite("upstream", this.upstream, upstream);
        this.upstream = upstream;
    }

	public boolean isUpstream() {
        beforePropertyRead("upstream");
        return this.upstream;
    }

    public void addToIssues(OpenIssue obj) {
        addToManyTarget("issues", obj, true);
    }

    public void removeFromIssues(OpenIssue obj) {
        removeToManyTarget("issues", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<OpenIssue> getIssues() {
        return (List<OpenIssue>)readProperty("issues");
    }

    public void addToIssuesClose(ClosedIssue obj) {
        addToManyTarget("issuesClose", obj, true);
    }

    public void removeFromIssuesClose(ClosedIssue obj) {
        removeToManyTarget("issuesClose", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ClosedIssue> getIssuesClose() {
        return (List<ClosedIssue>)readProperty("issuesClose");
    }

    public void addToMilestones(Milestone obj) {
        addToManyTarget("milestones", obj, true);
    }

    public void removeFromMilestones(Milestone obj) {
        removeToManyTarget("milestones", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Milestone> getMilestones() {
        return (List<Milestone>)readProperty("milestones");
    }

    public void setOrganization(Organization organization) {
        setToOneTarget("organization", organization, true);
    }

    public Organization getOrganization() {
        return (Organization)readProperty("organization");
    }

    public void setParent(Repository parent) {
        setToOneTarget("parent", parent, true);
    }

    public Repository getParent() {
        return (Repository)readProperty("parent");
    }

    public void addToPullRequests(PullRequest obj) {
        addToManyTarget("pullRequests", obj, true);
    }

    public void removeFromPullRequests(PullRequest obj) {
        removeToManyTarget("pullRequests", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PullRequest> getPullRequests() {
        return (List<PullRequest>)readProperty("pullRequests");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "description":
                return this.description;
            case "localStatus":
                return this.localStatus;
            case "name":
                return this.name;
            case "pushedAt":
                return this.pushedAt;
            case "pushedAtStr":
                return this.pushedAtStr;
            case "sshUrl":
                return this.sshUrl;
            case "updatedAt":
                return this.updatedAt;
            case "upstream":
                return this.upstream;
            case "issues":
                return this.issues;
            case "issuesClose":
                return this.issuesClose;
            case "milestones":
                return this.milestones;
            case "organization":
                return this.organization;
            case "parent":
                return this.parent;
            case "pullRequests":
                return this.pullRequests;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "description":
                this.description = (String)val;
                break;
            case "localStatus":
                this.localStatus = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "pushedAt":
                this.pushedAt = (LocalDateTime)val;
                break;
            case "pushedAtStr":
                this.pushedAtStr = (String)val;
                break;
            case "sshUrl":
                this.sshUrl = (String)val;
                break;
            case "updatedAt":
                this.updatedAt = (LocalDateTime)val;
                break;
            case "upstream":
                this.upstream = val == null ? false : (boolean)val;
                break;
            case "issues":
                this.issues = val;
                break;
            case "issuesClose":
                this.issuesClose = val;
                break;
            case "milestones":
                this.milestones = val;
                break;
            case "organization":
                this.organization = val;
                break;
            case "parent":
                this.parent = val;
                break;
            case "pullRequests":
                this.pullRequests = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.description);
        out.writeObject(this.localStatus);
        out.writeObject(this.name);
        out.writeObject(this.pushedAt);
        out.writeObject(this.pushedAtStr);
        out.writeObject(this.sshUrl);
        out.writeObject(this.updatedAt);
        out.writeBoolean(this.upstream);
        out.writeObject(this.issues);
        out.writeObject(this.issuesClose);
        out.writeObject(this.milestones);
        out.writeObject(this.organization);
        out.writeObject(this.parent);
        out.writeObject(this.pullRequests);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.description = (String)in.readObject();
        this.localStatus = (String)in.readObject();
        this.name = (String)in.readObject();
        this.pushedAt = (LocalDateTime)in.readObject();
        this.pushedAtStr = (String)in.readObject();
        this.sshUrl = (String)in.readObject();
        this.updatedAt = (LocalDateTime)in.readObject();
        this.upstream = in.readBoolean();
        this.issues = in.readObject();
        this.issuesClose = in.readObject();
        this.milestones = in.readObject();
        this.organization = in.readObject();
        this.parent = in.readObject();
        this.pullRequests = in.readObject();
    }

}
