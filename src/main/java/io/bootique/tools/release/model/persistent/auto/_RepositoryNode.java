package io.bootique.tools.release.model.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import io.bootique.tools.release.model.persistent.GitHubEntity;

/**
 * Class _RepositoryNode was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _RepositoryNode extends GitHubEntity {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Integer> COMMENTS_COUNT = PropertyFactory.createNumeric("commentsCount", Integer.class);
    public static final DateProperty<LocalDateTime> CREATED_AT = PropertyFactory.createDate("createdAt", LocalDateTime.class);
    public static final StringProperty<String> CREATED_AT_STR = PropertyFactory.createString("createdAtStr", String.class);
    public static final NumericProperty<Integer> NUMBER = PropertyFactory.createNumeric("number", Integer.class);
    public static final StringProperty<String> REPO_NAME = PropertyFactory.createString("repoName", String.class);
    public static final StringProperty<String> TITLE = PropertyFactory.createString("title", String.class);

    protected Integer commentsCount;
    protected LocalDateTime createdAt;
    protected String createdAtStr;
    protected Integer number;
    protected String repoName;
    protected String title;


    public void setCommentsCount(int commentsCount) {
        beforePropertyWrite("commentsCount", this.commentsCount, commentsCount);
        this.commentsCount = commentsCount;
    }

    public int getCommentsCount() {
        beforePropertyRead("commentsCount");
        if(this.commentsCount == null) {
            return 0;
        }
        return this.commentsCount;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        beforePropertyWrite("createdAt", this.createdAt, createdAt);
        this.createdAt = createdAt;
    }

    public LocalDateTime getCreatedAt() {
        beforePropertyRead("createdAt");
        return this.createdAt;
    }

    public void setCreatedAtStr(String createdAtStr) {
        beforePropertyWrite("createdAtStr", this.createdAtStr, createdAtStr);
        this.createdAtStr = createdAtStr;
    }

    public String getCreatedAtStr() {
        beforePropertyRead("createdAtStr");
        return this.createdAtStr;
    }

    public void setNumber(int number) {
        beforePropertyWrite("number", this.number, number);
        this.number = number;
    }

    public int getNumber() {
        beforePropertyRead("number");
        if(this.number == null) {
            return 0;
        }
        return this.number;
    }

    public void setRepoName(String repoName) {
        beforePropertyWrite("repoName", this.repoName, repoName);
        this.repoName = repoName;
    }

    public String getRepoName() {
        beforePropertyRead("repoName");
        return this.repoName;
    }

    public void setTitle(String title) {
        beforePropertyWrite("title", this.title, title);
        this.title = title;
    }

    public String getTitle() {
        beforePropertyRead("title");
        return this.title;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "commentsCount":
                return this.commentsCount;
            case "createdAt":
                return this.createdAt;
            case "createdAtStr":
                return this.createdAtStr;
            case "number":
                return this.number;
            case "repoName":
                return this.repoName;
            case "title":
                return this.title;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "commentsCount":
                this.commentsCount = (Integer)val;
                break;
            case "createdAt":
                this.createdAt = (LocalDateTime)val;
                break;
            case "createdAtStr":
                this.createdAtStr = (String)val;
                break;
            case "number":
                this.number = (Integer)val;
                break;
            case "repoName":
                this.repoName = (String)val;
                break;
            case "title":
                this.title = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.commentsCount);
        out.writeObject(this.createdAt);
        out.writeObject(this.createdAtStr);
        out.writeObject(this.number);
        out.writeObject(this.repoName);
        out.writeObject(this.title);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.commentsCount = (Integer)in.readObject();
        this.createdAt = (LocalDateTime)in.readObject();
        this.createdAtStr = (String)in.readObject();
        this.number = (Integer)in.readObject();
        this.repoName = (String)in.readObject();
        this.title = (String)in.readObject();
    }

}
