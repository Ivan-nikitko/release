package io.bootique.tools.release.model.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import io.bootique.tools.release.model.persistent.ClosedIssue;
import io.bootique.tools.release.model.persistent.GitHubEntity;
import io.bootique.tools.release.model.persistent.OpenIssue;
import io.bootique.tools.release.model.persistent.Repository;

/**
 * Class _Milestone was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Milestone extends GitHubEntity {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Integer> NUMBER = PropertyFactory.createNumeric("number", Integer.class);
    public static final StringProperty<String> STATE = PropertyFactory.createString("state", String.class);
    public static final StringProperty<String> TITLE = PropertyFactory.createString("title", String.class);
    public static final ListProperty<ClosedIssue> CLOSED_ISSUES = PropertyFactory.createList("closedIssues", ClosedIssue.class);
    public static final ListProperty<OpenIssue> OPEN_ISSUES = PropertyFactory.createList("openIssues", OpenIssue.class);
    public static final EntityProperty<Repository> REPOSITORY = PropertyFactory.createEntity("repository", Repository.class);

    protected Integer number;
    protected String state;
    protected String title;

    protected Object closedIssues;
    protected Object openIssues;
    protected Object repository;

    public void setNumber(int number) {
        beforePropertyWrite("number", this.number, number);
        this.number = number;
    }

    public int getNumber() {
        beforePropertyRead("number");
        if(this.number == null) {
            return 0;
        }
        return this.number;
    }

    public void setState(String state) {
        beforePropertyWrite("state", this.state, state);
        this.state = state;
    }

    public String getState() {
        beforePropertyRead("state");
        return this.state;
    }

    public void setTitle(String title) {
        beforePropertyWrite("title", this.title, title);
        this.title = title;
    }

    public String getTitle() {
        beforePropertyRead("title");
        return this.title;
    }

    public void addToClosedIssues(ClosedIssue obj) {
        addToManyTarget("closedIssues", obj, true);
    }

    public void removeFromClosedIssues(ClosedIssue obj) {
        removeToManyTarget("closedIssues", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ClosedIssue> getClosedIssues() {
        return (List<ClosedIssue>)readProperty("closedIssues");
    }

    public void addToOpenIssues(OpenIssue obj) {
        addToManyTarget("openIssues", obj, true);
    }

    public void removeFromOpenIssues(OpenIssue obj) {
        removeToManyTarget("openIssues", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<OpenIssue> getOpenIssues() {
        return (List<OpenIssue>)readProperty("openIssues");
    }

    public void setRepository(Repository repository) {
        setToOneTarget("repository", repository, true);
    }

    public Repository getRepository() {
        return (Repository)readProperty("repository");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "number":
                return this.number;
            case "state":
                return this.state;
            case "title":
                return this.title;
            case "closedIssues":
                return this.closedIssues;
            case "openIssues":
                return this.openIssues;
            case "repository":
                return this.repository;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "number":
                this.number = (Integer)val;
                break;
            case "state":
                this.state = (String)val;
                break;
            case "title":
                this.title = (String)val;
                break;
            case "closedIssues":
                this.closedIssues = val;
                break;
            case "openIssues":
                this.openIssues = val;
                break;
            case "repository":
                this.repository = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.number);
        out.writeObject(this.state);
        out.writeObject(this.title);
        out.writeObject(this.closedIssues);
        out.writeObject(this.openIssues);
        out.writeObject(this.repository);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.number = (Integer)in.readObject();
        this.state = (String)in.readObject();
        this.title = (String)in.readObject();
        this.closedIssues = in.readObject();
        this.openIssues = in.readObject();
        this.repository = in.readObject();
    }

}
